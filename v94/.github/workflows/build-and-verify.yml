name: Build and Verify v94 Bundle

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/codex-v94

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        working-directory: v94
        run: |
          pip install flake8 black
          pip install -r requirements.txt
      
      - name: Run flake8
        working-directory: v94
        run: flake8 . --max-line-length=120 --exclude=.git,__pycache__
      
      - name: Check formatting with black
        working-directory: v94
        run: black --check .

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'v94/'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        working-directory: v94
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Test Glyph Guard
        working-directory: v94
        run: |
          python glyph_guard_v14.py "test-glyph"
          echo "Glyph Guard test passed"
      
      - name: Generate SBOM
        working-directory: v94
        run: python generate_sbom.py
      
      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: v94/sbom.json
          retention-days: 30

  sbom-scan:
    name: SBOM Vulnerability Scan
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        working-directory: v94
        run: pip install -r requirements.txt
      
      - name: Download SBOM
        uses: actions/download-artifact@v3
        with:
          name: sbom
          path: v94/
      
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      
      - name: Scan SBOM with Grype
        working-directory: v94
        run: |
          python scan_vulnerabilities.py --sbom sbom.json --fail-on high || true
        continue-on-error: true

  build-image:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: v94
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  provenance:
    name: Generate Provenance
    runs-on: ubuntu-latest
    needs: [build-image]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        working-directory: v94
        run: pip install -r requirements.txt
      
      - name: Download SBOM
        uses: actions/download-artifact@v3
        with:
          name: sbom
          path: v94/
      
      - name: Generate Provenance v4
        working-directory: v94
        run: |
          # Create a dummy artifact for provenance
          echo "v94-bundle" > bundle.txt
          python generate_provenance.py bundle.txt --output provenance-v4.json
      
      - name: Upload Provenance
        uses: actions/upload-artifact@v3
        with:
          name: provenance-v4
          path: v94/provenance-v4.json
          retention-days: 90

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-image, provenance]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure kubectl
        run: |
          echo "Configure kubectl for staging environment"
          # Add kubectl configuration here
      
      - name: Deploy to staging
        working-directory: v94/k8s
        run: |
          echo "Deploying to staging..."
          # kubectl apply -f deployment-hardened.yaml
